{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Drops documentation","text":"<p>Drops is a lightweight event-broker useful for developing large-scale discrete-event based systems and simulations.</p>"},{"location":"flask_and_drops/","title":"Flask and Drops","text":"<p>In this tutorial we are going to learn how to combine my most loved fullstack web-framework Flask with Drops using the  Websocket protocol and an interactive plotting library ChartJS</p>"},{"location":"learn/","title":"Learn by example","text":""},{"location":"learn/#minimal-example","title":"Minimal example","text":"<p>Say we have two class instances aka plain old python objects (POPOs) that should communicate with each other without having any dependencies.</p>"},{"location":"learn/#one-machine-process-mm1-problem","title":"One-Machine-Process (M/M/1 Problem)","text":"<p>Components</p> <ol> <li>Item source: A randomized fire-and-forget source sending items to one machine ever \\(n\\) time units.</li> <li>Machine: A machine that does something to arriving items that takes \\(p\\) seconds and has an internal buffer of size \\(S\\).</li> </ol>"}]}